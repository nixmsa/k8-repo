Configuring a Pod to Use a Secret

Create a new Secret named db-credentials with the key/value pair db-password=passwd.

Create a Pod named backend that defines uses the Secret as environment variable named DB_PASSWORD and runs the container with the image nginx.

Shell into the Pod and print out the created environment variables. You should find DB_PASSWORD variable.

mahsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$ k create secret generic db-credentials --from-literal=db-passwd=passwd
secret/db-credentials created
mahsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$ k get secret
NAME                  TYPE                                  DATA   AGE
db-credentials        Opaque                                1      5s
default-token-8m4bv   kubernetes.io/service-account-token   3      9d
mahsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$


hsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$ k run backend --image=nginx --dry-run -o yaml --restart=Never > secret-pod.yaml
W1013 05:33:43.239413  105274 helpers.go:553] --dry-run is deprecated and can be replaced with --dry-run=client.
mahsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$ cat secret-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: backend
  name: backend
spec:
  containers:
  - image: nginx
    name: backend
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}


mahsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$ cat secret-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: backend
  name: backend
spec:
  containers:
  - image: nginx
    name: backend
    env:
      - name: DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: db-credentials
            key: db-password
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}



mahsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$ k get secret                      NAME                  TYPE                                  DATA   AGE
db-credentials        Opaque                                1      5s
default-token-8m4bv   kubernetes.io/service-account-token   3      10d
mahsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$ kubectl create -f secret-pod.yaml
Error from server (AlreadyExists): error when creating "secret-pod.yaml": pods "backend" already exists
mahsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$ kubectl apply  -f secret-pod.yaml Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply
pod/backend configured
mahsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$ k get secret                      NAME                  TYPE                                  DATA   AGE
db-credentials        Opaque                                1      43s
default-token-8m4bv   kubernetes.io/service-account-token   3      10d
mahsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$ kk
NAME                     READY   STATUS    RESTARTS   AGE     IP              NODE         NOMINATED NODE   READINESS GATES
backend                  1/1     Running   0          2m22s   172.16.11.204   k8s-node-0   <none>           <none>
nginx-6799fc88d8-v26s2   1/1     Running   0          5m32s   172.16.109.79   k8s-node-1   <none>           <none>
mahsan@K8s-master:~/projects/k8-repo/techcode/projects/CKAD-2020/ckad-prac01/configuration$ kubectl exec -it backend  -- /bin/sh
# env
KUBERNETES_PORT=tcp://10.96.0.1:443
KUBERNETES_SERVICE_PORT=443
HOSTNAME=backend
HOME=/root
NGINX_PORT_80_TCP=tcp://10.109.59.51:80
PKG_RELEASE=1~buster
TERM=xterm
KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
NGINX_VERSION=1.19.3
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
NGINX_SERVICE_HOST=10.109.59.51
KUBERNETES_PORT_443_TCP_PORT=443
NJS_VERSION=0.4.4
KUBERNETES_PORT_443_TCP_PROTO=tcp
NGINX_SERVICE_PORT=80
NGINX_PORT=tcp://10.109.59.51:80
KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
KUBERNETES_SERVICE_PORT_HTTPS=443
DB_PASSWORD=passwd
KUBERNETES_SERVICE_HOST=10.96.0.1
PWD=/
NGINX_PORT_80_TCP_ADDR=10.109.59.51
NGINX_PORT_80_TCP_PORT=80
NGINX_PORT_80_TCP_PROTO=tcp
#


